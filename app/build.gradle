apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

android {
    compileSdkVersion rootProject.sdkVersion
    defaultConfig {
        applicationId "com.fewwind.learn"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetVersion
        versionCode rootProject.appVersionCode
        versionName rootProject.appVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    if (project.hasProperty('system_key_store')) {
        signingConfigs {
            release {
                storeFile file(system_key_store)
                keyAlias system_key_alias
                storePassword system_key_store_password
                keyPassword system_key_alias_password
                v2SigningEnabled false
            }
        }

        productFlavors {
            market_channels.split(',').each { channel ->
                "${channel}" {
                    signingConfig signingConfigs.release
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}
kotlin {
    experimental {
        coroutines 'enable'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // implementation 只给当前项目使用 api 可以给第三方
    implementation project(':common')
    if (isNeedLoginModel.toBoolean()) {
        implementation project(':login')
    }
    api 'com.jakewharton:butterknife:7.0.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation project(':route_api')
    implementation project(':route_annotation')
    annotationProcessor project(':RouteProcess')
    implementation 'org.aspectj:aspectjrt:1.8.9'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1'
    implementation 'org.greenrobot:eventbus:3.0.0'
}

final def log = project.logger
final def variants = project.android.applicationVariants
variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
repositories {
    mavenCentral()
}
